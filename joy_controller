#!/usr/bin/env python
import rospy
from sensor_msgs.msg import Joy
from geometry_msgs.msg import Twist
from std_msgs.msg import Int32MultiArray

class JoyController:
    """
    ROS node that reads joystick inputs and publishes:
    1. /robot_twist (Twist) for desired velocity commands
    2. /robot_commands (Int32MultiArray) for mode and feature toggles
    """
    def __init__(self):
        # Initialize the ROS node
        rospy.init_node('joy_controller')
        # Publisher for raw velocity commands
        self.twist_pub = rospy.Publisher('/robot_twist', Twist, queue_size=1)
        # Publisher for mode and feature toggles
        self.cmd_pub   = rospy.Publisher('/robot_commands', Int32MultiArray, queue_size=1)

        # Command array indices:
        # [0]=bumper stop enable, [1]=backward-only enable,
        # [2]=LED/sound on backward, [3]=emergency brake,
        # [4]=smoothing mode (0=off,1=eco,2=sport)
        self.cmd_array = [1, 1, 1, 0, 1]
        # Store last button states for edge detection
        self.last_buttons = [0] * 12

        # Subscribe to joystick input
        rospy.Subscriber('/joy', Joy, self.joy_callback)
        rospy.spin()

    def joy_callback(self, joy):
        # 1) Publish raw Twist based on joystick axes
        twist = Twist()
        twist.linear.x  = joy.axes[1]  # left stick vertical → forward/back
        twist.angular.z = joy.axes[0]  # left stick horizontal → rotation
        self.twist_pub.publish(twist)

        # 2) Edge-detect buttons to toggle features
        b = joy.buttons
        # Button 0: toggle bumper-stop
        if b[0] == 1 and self.last_buttons[0] == 0:
            self.cmd_array[0] ^= 1
        # Button 1: toggle backward-only
        if b[1] == 1 and self.last_buttons[1] == 0:
            self.cmd_array[1] ^= 1
        # Button 2: toggle LED/sound on backward
        if b[2] == 1 and self.last_buttons[2] == 0:
            self.cmd_array[2] ^= 1
        # Button 3: emergency brake (hold = 1, release = 0)
        self.cmd_array[3] = b[3]
        # Button 4: cycle smoothing mode 0→1→2→0
        if b[4] == 1 and self.last_buttons[4] == 0:
            self.cmd_array[4] = (self.cmd_array[4] + 1) % 3

        # Publish the command array
        cmd_msg = Int32MultiArray(data=self.cmd_array)
        self.cmd_pub.publish(cmd_msg)

        # Update stored button states
        self.last_buttons = b[:]
        rospy.loginfo("[joy_controller] Commands: %s", self.cmd_array)

if __name__ == '__main__':
    JoyController()
